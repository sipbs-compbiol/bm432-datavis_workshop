---
title: "Better Tools Than Bar Charts"
description: |
 Improved visualisations for when you might reach for bar charts
number-sections: true
about:
  template: marquee
  links:
    - icon: twitter
      text: Twitter
      href: https://twitter.com/scompbiol
    - icon: github
      text: Github
      href: https://github.com/sipbs-compbiol
    - icon: envelope
      text: Email
      href: mailto:leighton.pritchard@strath.ac.uk
html:
  anchor-sections: true
execute:
  warning: false
embed-resources: false
filters:
  - shinylive
---

```{r setup, include=FALSE}
library("DT")
library("datasets")
library("dplyr")
library("GGally")
library("ggplot2")
library("ggridges")
library("readr")
library("stringr")
library("tidyr")
library("kableExtra")

# BG color for plots - should match .figure and .caption classes in rmd_style.css
figbg = "whitesmoke"
```

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600

library("shiny")
library("bslib")
library("ggplot2")

# ggplot2 will not work in shinylive without this - see callout
if (FALSE) {
  library(munsell)
}

# Define UI for app that draws a histogram
ui <- page_sidebar(sidebar = sidebar(radioButtons(
  "vistype",
  "Visualisation Type:",
  c(
    "Bar" = "bar",
    "Bar with Errors" = "bar_errors",
    "1D Scatterplot" = "univ_scatter",
    "Box Plot" = "boxplot",
    "Violin Plot" = "violinplot",
    "Bar + data" = "bardata",
    "Box + Data" = "boxdata",
    "Violin + Data" = "violindata"
  )
)),
mainPanel(tabsetPanel(
  type = "tabs",
  tabPanel("Dosage", plotOutput("dosage")),
  tabPanel("Effect", plotOutput("effect"))
)),
title = "Interactive example")

server <- function(input, output, session) {

  # Case study data
  data = anscombe %>% pivot_longer(
    everything(),
    cols_vary = "slowest",
    names_to = c(".value", "set"),
    names_pattern = "(.)(.)"
  ) %>% rename(all_of(c(
    cohort = "set",
    dosage = "x",
    effect = "y"
  )))
    
  # Summary data for case study
  summary_data = data.frame(
    cohort = c(1, 2, 3, 4),
    mean.dosage = colMeans(anscombe[1:4]),
    sd.dosage = apply(anscombe[1:4], 2, sd),
    mean.effect = colMeans(anscombe[5:8]),
    sd.effect = apply(anscombe[5:8], 2, sd)
  )
  summary_data = summary_data %>%
    mutate(sd.dosage.min = mean.dosage - sd.dosage) %>%
    mutate(sd.dosage.max = mean.dosage + sd.dosage) %>%
    mutate(sd.effect.min = mean.effect - sd.effect) %>%
    mutate(sd.effect.max = mean.effect + sd.effect)
  summary_data$cohort = as.factor(summary_data$cohort)
  
  # Interactive plot functions
  plot_dosage_bar = function() {
    ggplot(summary_data, aes(x = cohort, y = mean.dosage, fill = cohort)) +
      geom_bar(stat = "identity") +
      ylim(0, 15) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  plot_dosage_bar_errors = function() {
    ggplot(summary_data, aes(x = cohort, y = mean.dosage, fill = cohort)) +
      geom_bar(stat = "identity") +
      geom_errorbar(aes(ymin = sd.dosage.min, ymax = sd.dosage.max),
                    width = 0.25,
                    lwd = 1) +
      ylim(0, 15) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  
  plot_dosage_univ_scatter = function() {
    ggplot(data, aes(x = cohort, y = dosage, color = cohort)) +
      geom_jitter(
        width = 0.1,
        height = 0,
        size = 4,
        alpha = 0.6
      ) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  plot_dosage_boxplot = function() {
    ggplot(data, aes(x = cohort, y = dosage, fill = cohort)) +
      geom_boxplot(width = 0.3, height = 0) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  plot_dosage_violinplot = function() {
    ggplot(data, aes(x = cohort, y = dosage, fill = cohort)) +
      geom_violin(width = 0.3, height = 0) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  plot_dosage_bardata = function() {
    ggplot(summary_data, aes(x = cohort, y = mean.dosage, fill = cohort)) +
      geom_bar(stat = "identity") +
      geom_errorbar(aes(ymin = sd.dosage.min, ymax = sd.dosage.max),
                    width = 0.25,
                    lwd = 1) +
      geom_jitter(
        data = data,
        aes(x = cohort, y = dosage),
        width = 0.3,
        height = 0,
        size = 4,
        alpha = 0.6
      ) +
      ylim(0, 15) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  plot_dosage_boxdata = function() {
    ggplot(data, aes(x = cohort, y = dosage, fill = cohort)) +
      geom_boxplot(width = 0.3,
                   height = 0,
                   outlier.shape = NA) +
      geom_jitter(
        width = 0.1,
        height = 0,
        size = 4,
        alpha = 0.6
      ) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  plot_dosage_violindata = function() {
    ggplot(data, aes(x = cohort, y = dosage, fill = cohort)) +
      geom_violin(width = 0.3, height = 0) +
      geom_jitter(
        width = 0.1,
        height = 0,
        size = 4,
        alpha = 0.6
      ) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  plot_dosage = function(vistype) {
    switch(
      vistype,
      bar = plot_dosage_bar(),
      bar_errors = plot_dosage_bar_errors(),
      univ_scatter = plot_dosage_univ_scatter(),
      boxplot = plot_dosage_boxplot(),
      violinplot = plot_dosage_violinplot(),
      bardata = plot_dosage_bardata(),
      boxdata = plot_dosage_boxdata(),
      violindata = plot_dosage_violindata(),
      plot_dosage_bar()
    )
  }
  
  plot_effect_bar = function() {
    ggplot(summary_data, aes(x = cohort, y = mean.effect, fill = cohort)) +
      geom_bar(stat = "identity") +
      ylim(0, 15) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  plot_effect_bar_errors = function() {
    ggplot(summary_data, aes(x = cohort, y = mean.effect, fill = cohort)) +
      geom_bar(stat = "identity") +
      geom_errorbar(aes(ymin = sd.effect.min, ymax = sd.effect.max),
                    width = 0.25,
                    lwd = 1) +
      ylim(0, 15) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  
  plot_effect_univ_scatter = function() {
    ggplot(data, aes(x = cohort, y = effect, color = cohort)) +
      geom_jitter(
        width = 0.1,
        height = 0,
        size = 4,
        alpha = 0.6
      ) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  plot_effect_boxplot = function() {
    ggplot(data, aes(x = cohort, y = effect, fill = cohort)) +
      geom_boxplot(width = 0.3, height = 0) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  plot_effect_violinplot = function() {
    ggplot(data, aes(x = cohort, y = effect, fill = cohort)) +
      geom_violin(width = 0.3, height = 0) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  plot_effect_bardata = function() {
    ggplot(summary_data, aes(x = cohort, y = mean.effect, fill = cohort)) +
      geom_bar(stat = "identity") +
      geom_errorbar(aes(ymin = sd.effect.min, ymax = sd.effect.max),
                    width = 0.25,
                    lwd = 1) +
      geom_jitter(
        data = data,
        aes(x = cohort, y = effect),
        width = 0.3,
        height = 0,
        size = 4,
        alpha = 0.6
      ) +
      ylim(0, 15) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  plot_effect_boxdata = function() {
    ggplot(data, aes(x = cohort, y = effect, fill = cohort)) +
      geom_boxplot(width = 0.3,
                   height = 0,
                   outlier.shape = NA) +
      geom_jitter(
        width = 0.1,
        height = 0,
        size = 4,
        alpha = 0.6
      ) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }
  
  plot_effect_violindata = function() {
    ggplot2::ggplot(data, aes(x = cohort, y = effect, fill = cohort)) +
      geom_violin(width = 0.3, height = 0) +
      geom_jitter(
        width = 0.1,
        height = 0,
        size = 4,
        alpha = 0.6
      ) +
      scale_color_brewer(palette = "Set1") +
      scale_fill_brewer(palette = "Set1") +
      theme(
        legend.position = "none",
        plot.background = element_rect(fill = figbg, color = figbg)
      )
  }  
  
  plot_effect = function(vistype) {
    switch(
      vistype,
      bar = plot_effect_bar(),
      bar_errors = plot_effect_bar_errors(),
      univ_scatter = plot_effect_univ_scatter(),
      boxplot = plot_effect_boxplot(),
      violinplot = plot_effect_violinplot(),
      bardata = plot_effect_bardata(),
      boxdata = plot_effect_boxdata(),
      violindata = plot_effect_violindata(),
      plot_effect_bar()
    )
  }
  
  output$dosage <- renderPlot(
    plot_dosage(input$vistype)
  )
 
  output$effect <- renderPlot(
    plot_effect(input$vistype)
  ) 
}

# Create Shiny app
shinyApp(ui = ui, server = server)
```